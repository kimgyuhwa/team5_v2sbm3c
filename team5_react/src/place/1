
import React, { useState, useEffect, useContext } from 'react';
import { Search, MapPin, Navigation } from 'lucide-react';
import PlaceSideBar from '../components/sidebar/PlaceSideBar';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';
import { GlobalContext } from '../components/GlobalContext';

const PlaceDetail = () => {
  const { loginUser } = useContext(GlobalContext); // 로그인 유저 정보 (schoolno 등)
  const [selectedCategory, setSelectedCategory] = useState(); // {categoryId}
  const [places, setPlaces] = useState([]);  // 장소 목록 (API에서 받아옴)
  const [categories, setCategories] = useState([]); // 학교 관 + 장소 카테고리
  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지
  const [totalPages, setTotalPages] = useState(0); // 전체 페이지 수
  const [searchQuery, setSearchQuery] = useState(''); // 검색어 상태
  const navigate = useNavigate();

  const searchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  const handleSearch = (e) => {
    if (e.key === 'Enter') {
      setCurrentPage(1); // 검색 시 1페이지로 리셋
      // fetchPlaces 함수가 searchQuery를 의존성으로 가지므로, 상태 변경만으로 재호출됨
    }
  };

  // 학교 관 + 장소 카테고리 불러오기 (PlaceSideBar가 사용하는 카테고리)
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const schoolno = loginUser?.schoolno;
        if (!schoolno) return;

        // 학교 '관' 목록을 직접 가져오는 API 호출
        const res = await axios.get(`/places/list-by-school/${schoolno}`);
        const gwanList = res.data; // 응답이 '관' 목록 배열이라고 가정

        // '관' 목록을 카테고리 형식으로 변환
        const categoryResult = gwanList.map(gwan => ({
            id: gwan.schoolgwanno,
            name: gwan.schoolgwanname,
            icon: '🏫',
        }));

        // 중복 제거 (혹시 모를 중복 데이터 대비)
        const uniqueCategories = Array.from(new Map(categoryResult.map(item => [item.id, item])).values());

        setCategories(uniqueCategories);
      } catch (error) {
        //console.error('카테고리 불러오기 실패', error);
        setCategories([]); // 에러 발생 시 카테고리 목록 비우기
      }
    };

    if (loginUser?.schoolno) {
        fetchCategories();
    }
  }, [loginUser]);

  // 카테고리가 변경되면 1페이지로 리셋
  useEffect(() => {
    setCurrentPage(1);
  }, [selectedCategory]);


  // selectedCategory or currentPage가 바뀔 때마다 장소 목록 다시 불러오기
  useEffect(() => {
    const fetchPlaces = async () => {
      try {
        
        const schoolno = loginUser?.schoolno;
        const schoolgwanno= selectedCategory?.categoryId;
        if (!schoolno) return;

        let res;

        const commonParams = {
          page: currentPage - 1,
          size: 10, // 기본 사이즈
          keyword: searchQuery // 검색어 추가
        };

        if (selectedCategory?.categoryId) {
          // '관'(카테고리) 선택 시, 해당 관의 장소 목록을 조회하는 API 호출
          const params = {
            ...commonParams,
            schoolno: schoolno,
            schoolgwanno: selectedCategory.categoryId, // 선택된 카테고리 ID를 schoolgwanno로 사용
            size: 5 // 카테고리 선택 시 사이즈
          };
          res = await axios.get(`/places/places/list-by-school-and-gwan`, { params });
            //console.log('관선택->',res.data);
            //console.log('API 호출 파라미터 (관 선택):', params);
        } else {
          // 카테고리 선택이 없을 경우, 특정 학교의 모든 장소 조회 API 사용
          const params = {
            ...commonParams,
            schoolno: schoolno,
          };
          res = await axios.get(`/places/places/list-by-school/${schoolno}`, { params });
            //console.log('전부->',res.data);
            //console.log('API 호출 파라미터 (전체):', params);
        }
        
        //console.log('API 응답 데이터:', res.data);

        // API 응답이 페이징 구조(content, totalPages)를 포함한다고 가정하고 상태 업데이트
        if (res.data && res.data.content) {
          setPlaces(res.data.content);
          setTotalPages(res.data.totalPages || 0);
        } else {
          // 페이징 구조가 아닌 단순 배열일 경우 처리
          setPlaces(res.data || []);
          setTotalPages(1); // 페이지는 1개만 있다고 가정
        }

      } catch (error) {
        //console.error('장소 데이터를 불러오는 데 실패했습니다.', error);
        setPlaces([]); // 에러 발생 시 장소 목록 비우기
        setTotalPages(0); // 에러 발생 시 페이지 수 0으로 설정
      }
    };

    if (loginUser?.schoolno) {
        fetchPlaces();
    }
    //console.log(categories);
    //console.log(selectedCategory);
  }, [selectedCategory, loginUser, currentPage, searchQuery]);

    const { placeno } = useParams(); // ✅ URL에서 placeno 추출
  const [place, setPlace] = useState(null);

  useEffect(() => {
    const fetchPlace = async () => {
      try {
        const response = await axios.get(`/places/${placeno}`);
        setPlace(response.data);
      } catch (err) {
        console.error('장소 불러오기 실패', err);
      }
    };

    fetchPlace();
  }, [placeno]);

  if (!place) {
    return <div>로딩 중...</div>;
  }

  return (
    <div style={{ minHeight: '100vh', backgroundColor: 'white', fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif' }}>

      <div style={{
        display: 'flex',
        justifyContent: 'center',
        gap: '50px',
        padding: '30px 20px',
        maxWidth: '1400px',
        margin: '0 auto'
      }}>

        <PlaceSideBar 
          setSelectedCategory={setSelectedCategory} 
          selectedCategory={selectedCategory}
        />

        {/* 중앙 컨텐츠 영역 */}
        <div style={{ flex: 1, maxWidth: '800px', display: 'flex', flexDirection: 'column', gap: '20px' }}>

          <div style={{ padding: '40px' }}>
            <h1>{place.placename}</h1>
            <p>시간: {place.start_time} ~ {place.end_time}</p>

          <div className="text-base text-black-500"> {new Date(place.start_time).toLocaleTimeString('ko-KR', {
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
          })}</div>
          ~
          <div className="text-base text-black-500"> {new Date(place.end_time).toLocaleTimeString('ko-KR', {
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
          })}</div>
          </div>

          <div style={{
            gap:'40px',
            marginTop:'30px'
          }}>

          <button style={buttonStyle} onClick={() => navigate('/place/PlacesPage')}>
            <span>돌아가기</span>
          </button>

          <button style={buttonStyle} onClick={() => navigate('/components/Main')}>
            <span>예약하기</span>
          </button>

          </div>
        </div>
      </div>
    </div>
  );
};

export default PlaceDetail;

const buttonStyle = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  gap: '8px',
  backgroundColor: '#007bff',
  color: 'white',
  padding: '8px 8px',
  border: 'none',
  borderRadius: '10px',
  fontSize: '16px',
  fontWeight: '600',
  cursor: 'pointer',
  transition: 'background-color 0.3s',
  outline: 'none'
};