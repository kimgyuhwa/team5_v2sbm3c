import React, { useContext, useState } from 'react';
import { Search, User, ChevronDown, Settings, LogOut, Bell, Menu, Plus, MessageCircle } from 'lucide-react';
import { GlobalContext } from './GlobalContext';
import '../style/MainPage.css';
import TalentList from '../talent/post/TalentList';
import TalentCreateForm from '../talent/post/TalentCreateForm';
import ChatWidget from '../ai/ChatWidget';

export default function MainPage() {
  const { loginUser } = useContext(GlobalContext);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [hoveredCategory, setHoveredCategory] = useState(null);
  const [refresh, setRefresh] = useState(false);
  const [showCreateForm, setShowCreateForm] = useState(false);

  
  const toggleCreateForm = () => setShowCreateForm((prev) => !prev);
  const triggerRefresh = () => setRefresh((prev) => !prev);

  // // ÏÉòÌîå Í≤åÏãúÎ¨º Îç∞Ïù¥ÌÑ∞
  // const [posts, setPosts] = useState([
  //   {
  //     id: 1,
  //     title: "Ï≤´ Î≤àÏß∏ Í≤åÏãúÎ¨º ÎÇòÏ§ëÏóê Î∞îÍøîÏïºÌï®",
  //     content: "Ïù¥Í≤ÉÏùÄ Ï≤´ Î≤àÏß∏ Í≤åÏãúÎ¨ºÏùò ÎÇ¥Ïö©ÏûÖÎãàÎã§. Î¶¨Ïï°Ìä∏Î°ú ÎßåÎì† Î©îÏù∏ÌéòÏù¥ÏßÄÍ∞Ä Ïûò ÏûëÎèôÌïòÍ≥† ÏûàÏäµÎãàÎã§.",
  //     author: "ÏÇ¨Ïö©Ïûê1",
  //     date: "2025-06-27",
  //     likes: 12
  //   },
  //   {
  //     id: 2,
  //     title: "Îëê Î≤àÏß∏ Í≤åÏãúÎ¨º",
  //     content: "Îëê Î≤àÏß∏ Í≤åÏãúÎ¨ºÏûÖÎãàÎã§. Í≤ÄÏÉâ Í∏∞Îä•Í≥º Îã§ÏñëÌïú Ïª¥Ìè¨ÎÑåÌä∏Îì§Ïù¥ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.",
  //     author: "ÏÇ¨Ïö©Ïûê2",
  //     date: "2025-06-26",
  //     likes: 8
  //   },
  //   {
  //     id: 3,
  //     title: "ÏÑ∏ Î≤àÏß∏ Í≤åÏãúÎ¨º",
  //     content: "ÎßàÏßÄÎßâ Í≤åÏãúÎ¨ºÏûÖÎãàÎã§. Î∞òÏùëÌòï ÎîîÏûêÏù∏ÏúºÎ°ú Î™®Î∞îÏùºÏóêÏÑúÎèÑ Ïûò Î≥¥ÏûÖÎãàÎã§.",
  //     author: "ÏÇ¨Ïö©Ïûê3",
  //     date: "2025-06-25",
  //     likes: 15
  //   }
  // ]);
    const handleUpdated = () => {
  setRefresh(prev => !prev);  // refresh Í∞í ÌÜ†Í∏ÄÌï¥ÏÑú useEffect Îã§Ïãú Ïã§Ìñâ
  };

  const handleDeleted = () => {
    setRefresh(prev => !prev);
  };

  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const handleSearch = (event) => {
    if (event.keyCode === 13) {
      console.log('Í≤ÄÏÉâÏñ¥:', searchQuery);
    }
  };

  // const filteredPosts = posts.filter(post =>
  //   post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
  //   post.content.toLowerCase().includes(searchQuery.toLowerCase())
  // );

  const searchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  const handleChatClick = () => {
    console.log('Ï±ÑÌåÖ Î≤ÑÌäº ÌÅ¥Î¶≠');
  };

  const handleNotificationClick = () => {
    console.log('ÏïåÎ¶º Î≤ÑÌäº ÌÅ¥Î¶≠');
  };

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞
  const categories = [
    {
      id: 1,
      name: 'ÌïôÏóÖ',
      icon: 'üìö',
      subcategories: [
        { id: 11, name: 'ÏàòÏóÖ Ï†ïÎ≥¥' },
        { id: 12, name: 'ÏãúÌóò Ï†ïÎ≥¥' },
        { id: 13, name: 'Í≥ºÏ†ú ÎèÑÏõÄ' },
        { id: 14, name: 'ÌïôÏ†ê Í¥ÄÎ¶¨' }
      ]
    },
    {
      id: 2,
      name: 'ÎèôÏïÑÎ¶¨',
      icon: 'üé≠',
      subcategories: [
        { id: 21, name: 'ÎèôÏïÑÎ¶¨ Î™®Ïßë' },
        { id: 22, name: 'ÎèôÏïÑÎ¶¨ ÌôúÎèô' },
        { id: 23, name: 'Í≥µÏó∞/Ï†ÑÏãú' },
        { id: 24, name: 'Î¥âÏÇ¨ÌôúÎèô' }
      ]
    },
    {
      id: 3,
      name: 'Ï∑®ÏóÖ',
      icon: 'üíº',
      subcategories: [
        { id: 31, name: 'Ïù∏ÌÑ¥Ïã≠' },
        { id: 32, name: 'Ï∑®ÏóÖ Ï†ïÎ≥¥' },
        { id: 33, name: 'ÏûêÍ≤©Ï¶ù' },
        { id: 34, name: 'Ïä§Ìéô Í¥ÄÎ¶¨' }
      ]
    },
    {
      id: 4,
      name: 'ÏÉùÌôú',
      icon: 'üè†',
      subcategories: [
        { id: 41, name: 'Í∏∞ÏàôÏÇ¨' },
        { id: 42, name: 'ÎßõÏßë Ï†ïÎ≥¥' },
        { id: 43, name: 'ÍµêÌÜµ Ï†ïÎ≥¥' },
        { id: 44, name: 'ÏïåÎ∞î Ï†ïÎ≥¥' }
      ]
    },
    {
      id: 5,
      name: 'ÏûêÏú†Í≤åÏãúÌåê',
      icon: 'üí¨',
      subcategories: [
        { id: 51, name: 'Ïû°Îã¥' },
        { id: 52, name: 'ÏßàÎ¨∏' },
        { id: 53, name: 'ÌõÑÍ∏∞' },
        { id: 54, name: 'Í±¥ÏùòÏÇ¨Ìï≠' }
      ]
    }
  ];

  const handleCategoryClick = (categoryId, subcategoryId = null) => {
    console.log('Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÅ¥Î¶≠:', categoryId, subcategoryId);
  };

  

  return (
    <div className="main-container">
      <header className="header">
        <div className="header-inner">
          <div className="header-flex">
            <div className="logo">
              <a href="/components/main">
                <h1>Î°úÍ≥† ÎàÑÎ•¥Î©¥ Î©îÏù∏</h1>
              </a>
            </div>

            <div className="menu-area">
              <button
                className="icon-button chat"
                onClick={() => console.log('Ï±ÑÌåÖ Î≤ÑÌäº ÌÅ¥Î¶≠')}
              >
                <MessageCircle size={20} />
                <span className="badge">3</span>
              </button>

              <button
                className="icon-button notification"
                onClick={() => console.log('ÏïåÎ¶º Î≤ÑÌäº ÌÅ¥Î¶≠')}
              >
                <Bell size={20} />
                <span className="badge">7</span>
              </button>

              <div style={{ position: 'relative' }}>
                <button
                  className="my-page-btn"
                  onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                >
                  <User size={20} />
                  <span>ÎßàÏù¥ÌéòÏù¥ÏßÄ</span>
                  <ChevronDown
                    size={16}
                    style={{
                      transform: isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)',
                      transition: 'transform 0.3s',
                    }}
                  />
                </button>

                {isDropdownOpen && (
                  <div className="dropdown-menu">
                    <div>
                      <button className="dropdown-item">
                        <User size={16} style={{ marginRight: '12px' }} />
                        ÌîÑÎ°úÌïÑ Î≥¥Í∏∞
                      </button>
                      <button className="dropdown-item">
                        <Settings size={16} style={{ marginRight: '12px' }} />
                        ÏÑ§Ï†ï
                      </button>
                      <button className="dropdown-item">
                        <Bell size={16} style={{ marginRight: '12px' }} />
                        ÏïåÎ¶º
                      </button>
                      <hr className="dropdown-divider" />
                      <button className="dropdown-item logout">
                        <LogOut size={16} style={{ marginRight: '12px' }} />
                        Î°úÍ∑∏ÏïÑÏõÉ
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </header>

      <main className="main-content">
        <aside className="sidebar">
          <div className="sidebar-box">
            <h2 className="school-name">{loginUser.schoolname}</h2>

            <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
              <button className="sidebar-button green" onClick={toggleCreateForm}>
                <Plus size={20} />
                <span>ÎÇ¥ Í∏Ä Îì±Î°ù</span>
              </button>

              <button className="sidebar-button purple">
                <Menu size={20} />
                <span>Ïû•ÏÜåÎ≥¥Í∏∞</span>
              </button>
            </div>
          </div>

          <div className="sidebar-box">
            <h3 className="category-title">Ïπ¥ÌÖåÍ≥†Î¶¨</h3>

            <div className="category-list">
              {categories.map((category) => (
                <div
                  key={category.id}
                  style={{ position: 'relative' }}
                  onMouseEnter={() => setHoveredCategory(category.id)}
                  onMouseLeave={() => setHoveredCategory(null)}
                >
                  <button
                    onClick={() => handleCategoryClick(category.id)}
                    className={`category-btn ${
                      hoveredCategory === category.id ? 'hovered' : ''
                    }`}
                  >
                    <span style={{ fontSize: '16px' }}>{category.icon}</span>
                    <span style={{ fontWeight: '500' }}>{category.name}</span>
                  </button>

                  {hoveredCategory === category.id && (
                    <div className="subcategory-dropdown">
                      <div>
                        {category.subcategories.map((subcategory) => (
                          <button
                            key={subcategory.id}
                            onClick={() => handleCategoryClick(category.id, subcategory.id)}
                            className="subcategory-item"
                          >
                            {subcategory.name}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </aside>

        <section className="content-area">
          <div className="search-box">
            <div className="search-path">Ìôà {'>'} Ïû¨Îä•</div>
            <div className="search-input-wrapper">
              <Search className="search-icon" size={20} />
              <input
                type="text"
                placeholder="Í≤åÏãúÎ¨ºÏùÑ Í≤ÄÏÉâÌïòÏÑ∏Ïöî..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyDown={(e) => {
                  if (e.keyCode === 13) console.log('Í≤ÄÏÉâÏñ¥:', searchQuery);
                }}
                className="search-input"
              />
            </div>
          </div>

          {/* <div className="posts-box">
            <h2 className="posts-title">
              {searchQuery ? `"${searchQuery}" Í≤ÄÏÉâ Í≤∞Í≥º` : 'ÏµúÍ∑º Í≤åÏãúÎ¨º'}
            </h2>

            {filteredPosts.length === 0 ? (
              <div className="no-results">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</div>
            ) : (
              filteredPosts.map((post) => (
                <article key={post.id} className="post-item">
                  <header className="post-header">
                    <h3 className="post-title">{post.title}</h3>
                    <time className="post-date">{post.date}</time>
                  </header>
                  <p className="post-content">{post.content}</p>
                  <footer className="post-footer">
                    <span className="post-author">ÏûëÏÑ±Ïûê: {post.author}</span>
                    <div className="post-actions">
                      <button className="likes" onMouseOver={(e) => e.target.style.color = '#c82333'} onMouseOut={(e) => e.target.style.color = '#dc3545'}>
                        ‚ù§Ô∏è {post.likes}
                      </button>
                      <button className="comments" onMouseOver={(e) => e.target.style.color = '#0056b3'} onMouseOut={(e) => e.target.style.color = '#007bff'}>
                        ÎåìÍ∏Ä
                      </button>
                      <button className="share" onMouseOver={(e) => e.target.style.color = '#495057'} onMouseOut={(e) => e.target.style.color = '#6c757d'}>
                        Í≥µÏú†
                      </button>
                    </div>
                  </footer>
                </article>
              ))
            )}
          </div> */}
          {showCreateForm && (
            <TalentCreateForm
              onCreated={() => {
                setShowCreateForm(false); // ÏûëÏÑ± ÌõÑ Ìèº Îã´Í∏∞
                triggerRefresh();         // Î¶¨Ïä§Ìä∏ ÏÉàÎ°úÍ≥†Ïπ®
              }}
            />
          )}

          <div className="posts-box">
            {/* <h2> Ïù¥Îü∞ Ï†úÎ™©ÏùÄ TalentList ÎÇ¥Î∂ÄÏóêÏÑú Í¥ÄÎ¶¨ÌïòÍ±∞ÎÇò Ïó¨Í∏∞Ïóê Í∑∏ÎåÄÎ°ú ÎÜîÎèÑ Îê©ÎãàÎã§ */}
            <TalentList
              refresh={refresh}
              onUpdated={handleUpdated}
              onDeleted={handleDeleted}
            />
            <ChatWidget />
          </div>
        </section>
      </main>
    </div>
  );
}
